name: Appointment Service CI/CD

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'src/AppointmentService/**'
      - '.github/workflows/ci-cd.appointment.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/AppointmentService/**'
      - '.github/workflows/ci-cd.appointment.yml'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore src/AppointmentService/appointment.api/appointment.api.csproj

      - name: Build
        run: dotnet build src/AppointmentService/appointment.api/appointment.api.csproj --no-restore -c Release

      - name: Publish
        run: dotnet publish src/AppointmentService/appointment.api/appointment.api.csproj -c Release -o ./publish --no-build

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.ACR_REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: src/AppointmentService/appointment.api/Dockerfile
          push: true
          tags: |
            ${{ secrets.ACR_REGISTRY }}/appointment-service:${{ github.sha }}
            ${{ secrets.ACR_REGISTRY }}/appointment-service:latest
          platforms: linux/amd64

      - name: Ensure Container Apps Environment Exists
        uses: azure/CLI@v2
        with:
          inlineScript: |
            az containerapp env show \
              --name healthcare-ca-env \
              --resource-group healthcare-rg || \
            az containerapp env create \
              --name healthcare-ca-env \
              --resource-group healthcare-rg \
              --location eastus \
              --logs-destination none

      - name: Deploy to Azure Container App
        uses: azure/CLI@v2
        with:
          inlineScript: |
            az containerapp update \
              --name appointment-service \
              --resource-group healthcare-rg \
              --image ${{ secrets.ACR_REGISTRY }}/appointment-service:${{ github.sha }} \
              --set-env-vars \
                "ASPNETCORE_ENVIRONMENT=Development" \
                "AZURE_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" \
                "KeyVault__VaultUri=https://healthcare-vault.vault.azure.net/" \
              || \
            az containerapp create \
              --name appointment-service \
              --resource-group healthcare-rg \
              --environment healthcare-ca-env \
              --image ${{ secrets.ACR_REGISTRY }}/appointment-service:${{ github.sha }} \
              --target-port 8080 \
              --ingress external \
              --registry-server ${{ secrets.ACR_REGISTRY }} \
              --registry-username ${{ secrets.ACR_USERNAME }} \
              --registry-password ${{ secrets.ACR_PASSWORD }} \
              --user-assigned healthcare-identity \
              --cpu 0.5 \
              --memory 1.0Gi \
              --min-replicas 1 \
              --max-replicas 3 \
              --env-vars \
                "ASPNETCORE_ENVIRONMENT=Development" \
                "AZURE_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" \
                "KeyVault__VaultUri=https://healthcare-vault.vault.azure.net/"

      - name: Wait for Container App to be Ready
        uses: azure/CLI@v2
        with:
          inlineScript: |
            echo "Checking Container App status..."
            for i in {1..60}; do
              STATUS=$(az containerapp show \
                --name appointment-service \
                --resource-group healthcare-rg \
                --query properties.provisioningState \
                --output tsv 2>/dev/null)
              echo "Container App Status: $STATUS"
              if [ "$STATUS" = "Succeeded" ]; then
                echo "Container App provisioning succeeded"
                break
              fi
              echo "Waiting for Container App to provision... (Attempt $i/60)"
              sleep 10
            done
            if [ "$STATUS" != "Succeeded" ]; then
              echo "Error: Container App failed to provision after 60 attempts"
              exit 1
            fi
            echo "Fetching Container App FQDN..."
            APP_URL=$(az containerapp show \
              --name appointment-service \
              --resource-group healthcare-rg \
              --query configuration.ingress.fqdn \
              --output tsv 2>/dev/null)
            if [ -n "$APP_URL" ]; then
              echo "Container App FQDN: $APP_URL"
              echo "APP_URL=https://$APP_URL" >> $GITHUB_ENV
            else
              echo "Error: Failed to retrieve Container App FQDN"
              az containerapp show \
                --name appointment-service \
                --resource-group healthcare-rg --output json
              exit 1
            fi
            for i in {1..30}; do
              if curl -f "https://$APP_URL/health" 2>/dev/null; then
                echo "Container App is ready"
                break
              fi
              echo "Waiting for Container App... (Attempt $i/30)"
              sleep 10
            done

  update-apim:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Fetch Swagger from Container App
        run: |
          for i in {1..5}; do
            if curl -f -o swagger.json "${{ env.APP_URL }}/swagger/v1/swagger.json"; then
              echo "Swagger JSON fetched successfully"
              break
            fi
            echo "Retrying... ($i/5)"
            if [ $i -eq 5 ]; then
              echo "Failed to fetch Swagger JSON after 5 attempts"
              exit 1
            fi
            sleep 5
          done
        env:
          APP_URL: ${{ env.APP_URL }}

      - name: Validate Swagger JSON
        run: |
          jq . swagger.json > /dev/null || { echo "Invalid Swagger JSON"; exit 1; }
          echo "Swagger JSON is valid"

      - name: Upload Swagger to Blob Storage
        uses: azure/CLI@v2
        with:
          inlineScript: |
            az storage blob upload \
              --account-name healthcarergb9d7 \
              --container-name swagger-artifacts \
              --name appointment/v1/swagger.json \
              --file swagger.json \
              --auth-mode login

      - name: Update APIM Swagger
        uses: ./.github/workflows/apim.yml
        with:
          serviceName: appointment
          apiVersion: v1
          swaggerBlobPath: swagger-artifacts/appointment/v1/swagger.json
          storageAccountName: healthcarergb9d7
          apimResourceGroup: healthcare-rg
          apimServiceName: healthcare-apim
          azureCredentials: ${{ secrets.AZURE_CREDENTIALS }}