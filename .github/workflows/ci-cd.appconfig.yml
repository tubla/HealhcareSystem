name: Sync App Configuration

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'src/AppointmentService/dev.appconfig.env'
      - 'src/AuthenticationService/dev.appconfig.env'
      - '.github/workflows/ci-cd.appconfig.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/AppointmentService/dev.appconfig.env'
      - 'src/AuthenticationService/dev.appconfig.env'
      - '.github/workflows/ci-cd.appconfig.yml'

jobs:
  sync-app-config:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Install jq
      run: |
        sudo apt-get update && sudo apt-get install -y jq

    - name: Validate App Configuration Existence
      run: |
        az appconfig show --name healthcare-appconfig || {
          echo "ERROR: Azure App Configuration 'healthcare-appconfig' not found"
          exit 1
        }

    - name: Sync AppointmentService App Configuration
      run: |
        if [ -f src/AppointmentService/dev.appconfig.env ]; then
          echo "Processing AppointmentService dev.appconfig.env"
          # Debug: Log raw content
          cat src/AppointmentService/dev.appconfig.env
          # Process keys
          while IFS=': ' read -r key value; do
            # Remove quotes from value
            value=$(echo "$value" | sed 's/^"\(.*\)"$/\1/')
            echo "Processing key: $key"
            # Replace __ with : for App Configuration key
            config_key=$(echo "$key" | sed 's/__/:/g')
            # Check for Key Vault reference
            if [[ "$value" =~ ^secret://([^/]+)/(.+)$ ]]; then
              vault_name="${BASH_REMATCH[1]}"
              secret_name="${BASH_REMATCH[2]}"
              vault_uri="https://${vault_name}.vault.azure.net/"
              secret_identifier="${vault_uri}secrets/${secret_name}"
              echo "Detected KeyVault reference: $config_key (secretIdentifier: $secret_identifier)"
              # Check for existing KeyVault reference
              existing=$(az appconfig kv show --name healthcare-appconfig --key "$config_key" --query "{contentType: contentType, vaultId: value}" -o json 2>/dev/null || echo "{}")
              existing_content_type=$(echo "$existing" | jq -r .contentType)
              existing_vault_id=$(echo "$existing" | jq -r .vaultId)
              echo "Existing contentType: $existing_content_type, vaultId: $existing_vault_id, Expected vaultId: $secret_identifier"
              if [ "$existing_content_type" = "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8" ] && [ "$existing_vault_id" = "$secret_identifier" ]; then
                echo "Skipping duplicate KeyVault reference: $config_key"
              else
                echo "Setting KeyVault reference: $config_key (secretIdentifier: $secret_identifier)"
                az appconfig kv set-keyvault --name healthcare-appconfig --key "$config_key" --secret-identifier "$secret_identifier" --yes || {
                  echo "ERROR: Failed to set KeyVault reference: $config_key"
                  exit 1
                }
              fi
            else
              echo "Detected regular key: $config_key (value: $value)"
              # Check for existing regular key
              existing_value=$(az appconfig kv show --name healthcare-appconfig --key "$config_key" --query value -o tsv 2>/dev/null || echo "")
              echo "Existing value: $existing_value, New value: $value"
              if [ "$existing_value" = "$value" ]; then
                echo "Skipping duplicate key: $config_key"
              else
                echo "Setting key: $config_key (value: $value)"
                az appconfig kv set --name healthcare-appconfig --key "$config_key" --value "$value" --yes || {
                  echo "ERROR: Failed to set key: $config_key"
                  exit 1
                }
              fi
            fi
          done < src/AppointmentService/dev.appconfig.env
        else
          echo "ERROR: src/AppointmentService/dev.appconfig.env not found"
          exit 1
        fi

    - name: Sync AuthenticationService App Configuration
      run: |
        if [ -f src/AuthenticationService/dev.appconfig.env ]; then
          echo "Processing AuthenticationService dev.appconfig.env"
          # Debug: Log raw content
          cat src/AuthenticationService/dev.appconfig.env
          # Process keys
          while IFS=': ' read -r key value; do
            # Remove quotes from value
            value=$(echo "$value" | sed 's/^"\(.*\)"$/\1/')
            echo "Processing key: $key"
            # Replace __ with : for App Configuration key
            config_key=$(echo "$key" | sed 's/__/:/g')
            # Check for Key Vault reference
            if [[ "$value" =~ ^secret://([^/]+)/(.+)$ ]]; then
              vault_name="${BASH_REMATCH[1]}"
              secret_name="${BASH_REMATCH[2]}"
              vault_uri="https://${vault_name}.vault.azure.net/"
              secret_identifier="${vault_uri}secrets/${secret_name}"
              echo "Detected KeyVault reference: $config_key (secretIdentifier: $secret_identifier)"
              # Check for existing KeyVault reference
              existing=$(az appconfig kv show --name healthcare-appconfig --key "$config_key" --query "{contentType: contentType, vaultId: value}" -o json 2>/dev/null || echo "{}")
              existing_content_type=$(echo "$existing" | jq -r .contentType)
              existing_vault_id=$(echo "$existing" | jq -r .vaultId)
              echo "Existing contentType: $existing_content_type, vaultId: $existing_vault_id, Expected vaultId: $secret_identifier"
              if [ "$existing_content_type" = "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8" ] && [ "$existing_vault_id" = "$secret_identifier" ]; then
                echo "Skipping duplicate KeyVault reference: $config_key"
              else
                echo "Setting KeyVault reference: $config_key (secretIdentifier: $secret_identifier)"
                az appconfig kv set-keyvault --name healthcare-appconfig --key "$config_key" --secret-identifier "$secret_identifier" --yes || {
                  echo "ERROR: Failed to set KeyVault reference: $config_key"
                  exit 1
                }
              fi
            else
              echo "Detected regular key: $config_key (value: $value)"
              # Check for existing regular key
              existing_value=$(az appconfig kv show --name healthcare-appconfig --key "$config_key" --query value -o tsv 2>/dev/null || echo "")
              echo "Existing value: $existing_value, New value: $value"
              if [ "$existing_value" = "$value" ]; then
                echo "Skipping duplicate key: $config_key"
              else
                echo "Setting key: $config_key (value: $value)"
                az appconfig kv set --name healthcare-appconfig --key "$config_key" --value "$value" --yes || {
                  echo "ERROR: Failed to set key: $config_key"
                  exit 1
                }
              fi
            fi
          done < src/AuthenticationService/dev.appconfig.env
        else
          echo "ERROR: src/AuthenticationService/dev.appconfig.env not found"
          exit 1
        fi